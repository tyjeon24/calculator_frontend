name: Build & deploy

# on: # 1. on 키워드 아래에 트리거를 정합니다.
#   push:
#     branches:
#       - main # 1.1. main 브랜치에 push할 경우 작동합니다.
#   pull_request:
#     branches:
#       - main # 1.2. main 브랜치에 pull request가 승인되어 합쳐진 경우 작동합니다.

on: # 1.3. 수동으로 실행 : 실행 버튼이 하나 생깁니다.
  workflow_dispatch:

jobs: # 2. jobs는 실제로 하는 작업입니다.
  build: # 2.1. jobs 최상위 계층에는 작업 이름이 들어갑니다. 예) build, my_job, deploy
    name: Build # 2.2 name 키워드는 그냥 이름입니다.
    runs-on: ubuntu-latest # 2.3 OS입니다. 예) ubuntu-latest, windows-latest


    steps: # 2.4. steps 키워드는 프로그래밍의 함수 선언처럼, 특정 명령어들을 하나로 묶을 수 있습니다.
    - name: Checkout code
      uses: actions/checkout@v3 #  2.5. 체크아웃 : 원격 저장소에 올려둔 코드를 로컬 컴퓨터로 내려받는 작업
    
    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
          flutter-version: '3.0.5'
          channel: 'stable'
    
    - run: flutter pub get # Get dependencies - run: flutter test # Test project
    - run: flutter build web # Build release project

    - name: Upload production-ready build files
      uses: actions/upload-artifact@v2 # 빌드하면 나오는 .build/web 폴더를 업로드
      with:
        path: ./build/web 
  
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: production-files
        path: ./build

    - name: Deploy to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build
